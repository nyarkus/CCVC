// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Schemes.CV
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Frame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static Frame GetRootAsFrame(ByteBuffer _bb) { return GetRootAsFrame(_bb, new Frame()); }
  public static Frame GetRootAsFrame(ByteBuffer _bb, Frame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Content(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ContentLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Schemes.CV.Frame> CreateFrame(FlatBufferBuilder builder,
      VectorOffset contentOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Frame.AddContent(builder, contentOffset);
    return Frame.EndFrame(builder);
  }

  public static void StartFrame(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddContent(FlatBufferBuilder builder, VectorOffset contentOffset) { builder.AddOffset(0, contentOffset.Value, 0); }
  public static VectorOffset CreateContentVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateContentVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateContentVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateContentVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartContentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Schemes.CV.Frame> EndFrame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Schemes.CV.Frame>(o);
  }
}


static public class FrameVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Content*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct ConsoleVideo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static ConsoleVideo GetRootAsConsoleVideo(ByteBuffer _bb) { return GetRootAsConsoleVideo(_bb, new ConsoleVideo()); }
  public static ConsoleVideo GetRootAsConsoleVideo(ByteBuffer _bb, ConsoleVideo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyConsoleVideo(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ConsoleVideoVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConsoleVideo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Fps { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public byte Sound(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SoundLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSoundBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSoundArray() { return __p.__vector_as_array<byte>(6); }
  public Schemes.CV.Frame? Frames(int j) { int o = __p.__offset(8); return o != 0 ? (Schemes.CV.Frame?)(new Schemes.CV.Frame()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FramesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Width { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Height { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public byte Colors { get { int o = __p.__offset(16); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Schemes.CV.ConsoleVideo> CreateConsoleVideo(FlatBufferBuilder builder,
      double fps = 0.0,
      VectorOffset soundOffset = default(VectorOffset),
      VectorOffset framesOffset = default(VectorOffset),
      int version = 0,
      int width = 0,
      int height = 0,
      byte colors = 0) {
    builder.StartTable(7);
    ConsoleVideo.AddFps(builder, fps);
    ConsoleVideo.AddHeight(builder, height);
    ConsoleVideo.AddWidth(builder, width);
    ConsoleVideo.AddVersion(builder, version);
    ConsoleVideo.AddFrames(builder, framesOffset);
    ConsoleVideo.AddSound(builder, soundOffset);
    ConsoleVideo.AddColors(builder, colors);
    return ConsoleVideo.EndConsoleVideo(builder);
  }

  public static void StartConsoleVideo(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddFps(FlatBufferBuilder builder, double fps) { builder.AddDouble(0, fps, 0.0); }
  public static void AddSound(FlatBufferBuilder builder, VectorOffset soundOffset) { builder.AddOffset(1, soundOffset.Value, 0); }
  public static VectorOffset CreateSoundVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSoundVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSoundVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSoundVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSoundVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(2, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, Offset<Schemes.CV.Frame>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, Offset<Schemes.CV.Frame>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Schemes.CV.Frame>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Schemes.CV.Frame>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVersion(FlatBufferBuilder builder, int version) { builder.AddInt(3, version, 0); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(4, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(5, height, 0); }
  public static void AddColors(FlatBufferBuilder builder, byte colors) { builder.AddByte(6, colors, 0); }
  public static Offset<Schemes.CV.ConsoleVideo> EndConsoleVideo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Schemes.CV.ConsoleVideo>(o);
  }
  public static void FinishConsoleVideoBuffer(FlatBufferBuilder builder, Offset<Schemes.CV.ConsoleVideo> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedConsoleVideoBuffer(FlatBufferBuilder builder, Offset<Schemes.CV.ConsoleVideo> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class ConsoleVideoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Fps*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Sound*/, 1 /*byte*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Frames*/, Schemes.CV.FrameVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Version*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Width*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Height*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Colors*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
